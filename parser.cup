import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with{:
    table = new HashMap<String, HashMap<String, Object[]>>();
:};

parser code{:
    public HashMap<String, HashMap<String, Object[]>> table;

    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
:};

/////////////////////////////
//// Symbols Delaration
////////////////////////////

terminal TK1, TK2, TK3, S, SEP, CCL, EUR, CM, COL;
terminal String QSTRING, ID;
terminal Double REAL;
terminal Integer UINT;

non terminal prog, header, h1, cpus, device;
non terminal HashMap cpu_list;
non terminal Double multiplier, prod, purchases;

/////////////////////////////
//// Header
////////////////////////////

start with prog;

prog ::= header SEP cpus SEP purchases:tot{:
    System.out.println("AGGREGATE_TOTAL: " + tot);
:};

header ::= h1 TK1 S h1 | h1 TK1 S h1 TK1 S h1 | h1 TK1 S h1 TK1 S h1 TK1 S h1;
h1 ::= | h1 TK2 S | h1 TK3 S;

/////////////////////////////
//// CPUS Section
////////////////////////////

cpus ::= device S device S device S | cpus device S device S;

device ::= QSTRING:n CCL cpu_list:c{:
    parser.table.put(n, c);
:};

cpu_list ::= | cpu_list:c ID:id QSTRING:n REAL:x EUR{:
        HashMap<String, Object[]> components = new HashMap<String, Object[]>();
        Object[] ins = new Object[2];
        ins[0] = n;
        ins[1] = x;
        components.put(id, ins);
        RESULT = components;
:} | cpu_list:c CM ID:id QSTRING:n REAL:x EUR{:
        Object[] ins = new Object[2];
        ins[0] = n;
        ins[1] = x;
        c.put(id, ins);
        RESULT = c;
:};

/////////////////////////////
//// P Section
////////////////////////////

purchases ::= QSTRING COL multiplier COL prod:tot S{:
    System.out.println("TOTAL: " + tot);
    System.out.println("***");
    RESULT = tot;
:} | purchases:prev QSTRING COL multiplier COL prod:tot S{:
    System.out.println("TOTAL: " + tot);
    RESULT = tot + prev;
:};

prod ::= ID:id UINT:y{:
    String device = (String)parser.stack(-5);
    Double multiplier = (Double)parser.stack(-3);
    HashMap<String, Object[]> components = parser.table.get(device);
    String name = (String)components.get(id)[0];
    Double price = (Double)components.get(id)[1];
    Double total = price * y * multiplier;
    System.out.println(name + " " + total);
    RESULT = total;
:} 
| prod:tot CM ID:id UINT:y{:
    String device = (String)parser.stack(-7);
    Double multiplier = (Double)parser.stack(-5);
    HashMap<String, Object[]> components = parser.table.get(device);
    String name = (String)components.get(id)[0];
    Double price = (Double)components.get(id)[1];
    Double total = price * y * multiplier;
    System.out.println(name + " " + total);
    RESULT = tot + total;
:};

multiplier ::= {:
    RESULT = new Double(1);
:}| REAL:x {:
    RESULT = x;
:};